<project name="Helianthus.bolanderi" default="beta">
	<property name="bolanderi.version" value="0.1.0" />

	<propertyfile file="version.properties">
		<entry key="project.version.main" default="0.0" />
		<entry key="project.version.release" default="0" />
		<entry key="project.version.build" default="0" type="int" pattern="####" operation="+" />
		<entry key="project.version.stable" default="0.0.0.0" />
	</propertyfile>

	<property file="build.properties" />
	<property file="version.properties" />
	<property name="project.version" value="${project.version.main}.${project.version.release}.${project.version.build}" />
	<tstamp>
		<format property="project.build.year" pattern="yyyy" />
		<format property="project.build.time" pattern="yyyy-MM-dd HH:mm:ss" />
		<format property="project.build.timestamp" pattern="yyyy-MM-dd'T'HH:mm:ss'Z'" timezone="GMT+0" />
	</tstamp>

	<echoproperties prefix="project" />

	<patternset id="pattern.text">
		<include name="**/*.action" />
		<include name="**/*.atom" />
		<include name="**/*.css" />
		<include name="**/*.filter" />
		<include name="**/*.html" />
		<include name="**/*.js" />
		<include name="**/*.json" />
		<include name="**/*.manifest" />
		<include name="**/*.plist" />
		<include name="**/*.rdf" />
		<include name="**/*.xml" />
		<include name="**/*.xul" />
	</patternset>

	<!--** test **-->
	<target name="test" depends="_build,_build_cont" />

	<!--** build **-->
	<target name="build" depends="_build,_minify,_build_cont" />

	<!--** beta **-->
	<target name="beta" depends="_beta, build, _dist" />

	<!--** stable **-->
	<target name="stable" depends="_stable, build, _dist">
		<!-- duplicate as beta -->
		<copy todir="${dir.dist}/beta">
		 <fileset dir="${dir.dist}/stable" includes="**" />
		</copy>

		<propertyfile file="version.properties">
			<entry key="project.version.release" type="int" operation="+" value="1" />
			<entry key="project.version.build" type="int" value="0" />
			<entry key="project.version.stable" value="${project.version}" />
		</propertyfile>
	</target>

	<!--** internals **-->

	<tempfile property="file.temp" destdir="${dir.build}" suffix=".js" deleteonexit="true" />

	<target name="_build">
		<property name="project.version.channel" value="dev" />
		<property name="project.file.url" value="${file.url.test}/${project.name.short}.js" />
		<property name="project.debug" value="true" />

		<delete dir="${dir.build}" />
		<mkdir dir="${dir.build}" />

		<!-- fix eol -->
		<fixcrlf srcdir="src" eol="unix" encoding="utf-8">
			<patternset refid="pattern.text" />
		</fixcrlf>

		<!-- PRE_CONTENT -->
		<concat destfile="${file.temp}">
			<filterchain>
				<stripjavacomments />
				<striplinebreaks />
				<tokenfilter>
					<replaceregex pattern="\s+(?=[{,:;}])|(?&lt;=[{,:;}])\s+" replace="" flags="g" />
					<replaceregex pattern="url([^)]+)" replace="none" flags="g" />
					<replacestring from="&apos;" to="\&apos;" />
				</tokenfilter>
			</filterchain>

			<header filtering="false" trim="true" trimleading="true">
			(function(style, css)
			{
				style.id = '${project.name.short}-style-prebuilt';
				document.getElementsByTagName('head')[0].appendChild(style);
				style.styleSheet ? style.styleSheet.cssText += css : style.appendChild(document.createTextNode(css));
			})(document.createElement('style'), '</header><footer filtering="false" trimleading="true">');

			</footer>

			<fileset dir="src/script" includes="**/*.css" />
		</concat>

		<concat destfile="${file.temp}" append="true">
			<fileset dir="src/script" includes="lib/*.js" />
		</concat>

		<loadfile property="PRE_CONTENT" srcfile="${file.temp}" />

		<!-- CONTENT -->
		<concat destfile="${file.temp}" encoding="utf-8">
			<filterchain>
				<escapeunicode />
				<tokenfilter>
					<filetokenizer />
					<replaceregex pattern=" *\\\n\t+" replace="\\\\n" flags="g" />
					<replaceregex pattern="(/\*@cc_on@.+?@end@[^)]+)" replace="eval('\1')" flags="gs" />
				</tokenfilter>
			</filterchain>

			<fileset dir="src/script">
				<include name="lib/1/**/*.js" />
				<include name="lib/2/**/*.js" />
				<include name="lib/3/**/*.js" />
				<include name="lib/4/**/*.js" />
				<include name="lib/5/**/*.js" />
			</fileset>
			<fileset dir="src/script" includes="kernel/**/*.js" />
			<fileset dir="src/script" includes="modules/**/*.js" />
		</concat>

		<loadfile property="CONTENT" srcfile="${file.temp}" />

		<!-- js -->
		<copy file="src/script/bolanderi.js" tofile="${dir.build}/${project.name.short}.js">
			<filterchain>
				<concatfilter prepend="src/header.js" />
			</filterchain>
			<filterset begintoken="/*@" endtoken="@*/">
				<filter token="PRE_CONTENT" value="${PRE_CONTENT}" />
				<filter token="CONTENT" value="${CONTENT}" />
			</filterset>
		</copy>
	</target>

	<taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask" classpath="${dir.lib}/closurecompiler/compiler.jar" />
	<target name="_minify">
		<!-- js(raw) -->
		<move file="${dir.build}/${project.name.short}.js" tofile="${dir.build}/${project.name.short}-raw.js" />

		<!-- js(minified) -->
		<jscomp compilationLevel="simple" warning="quiet" debug="false" output="${file.temp}">
			<sources dir="${dir.build}">
				<file name="${project.name.short}-raw.js" />
			</sources>
		</jscomp>

		<copy file="${file.temp}" tofile="${dir.build}/${project.name.short}.js">
			<filterchain>
				<concatfilter prepend="src/header.js" />
			</filterchain>
		</copy>
	</target>

	<target name="_build_cont">
		<!-- user.js -->
		<copy file="src/user/bolanderi.user.js" todir="${dir.build}/user">
			<filterchain>
				<concatfilter prepend="src/header.js" />
			</filterchain>
		</copy>

		<!-- xpi -->
		<copy todir="${dir.build}/xpi">
			<fileset dir="src/xpi" />
		</copy>
		<copy file="${dir.build}/${project.name.short}.js" todir="${dir.build}/xpi/content/" />

		<!-- m2f -->
		<copy file="src/m2f/bolanderi.xml" todir="${dir.build}/m2f" />
		<copy file="${dir.build}/${project.name.short}.js" todir="${dir.build}/m2f/${project.name.short}/scripts" />

		<!-- crx -->
		<copy todir="${dir.build}/crx">
			<fileset dir="src/crx" />
			<fileset file="${dir.build}/${project.name.short}.js" />
		</copy>

		<!-- oex -->
		<copy todir="${dir.build}/oex">
			<fileset dir="src/oex" />
		</copy>
		<copy file="${dir.build}/${project.name.short}.js" todir="${dir.build}/oex/includes" />

		<!-- safariextension -->
		<copy todir="${dir.build}/annuus.safariextension">
			<fileset dir="src/safariextz" />
			<fileset file="${dir.build}/${project.name.short}.js" />
		</copy>

		<!-- privoxy -->
		<copy todir="${dir.build}/privoxy">
			<fileset dir="src/privoxy" />
		</copy>

		<!-- doc -->
		<copy todir="${dir.build}/doc">
			<fileset dir="src/doc" />
		</copy>

		<!-- replace tokens -->
		<replace dir="${dir.build}">
			<patternset refid="pattern.text" />

			<replacefilter token="@BOLANDERI_VERSION@" value="${bolanderi.version}" />
			<replacefilter token="@PROJECT_AUTHOR@" value="${project.author}" />
			<replacefilter token="@PROJECT_BUILD_TIME@" value="${project.build.time}" />
			<replacefilter token="@PROJECT_BUILD_TIMESTAMP@" value="${project.build.timestamp}" />
			<replacefilter token="@PROJECT_BUILD_YEAR@" value="${project.build.year}" />
			<replacefilter token="@PROJECT_DEBUG@" value="${project.debug}" />
			<replacefilter token="@PROJECT_DESCRIPTION@" value="${project.description}" />
			<replacefilter token="@PROJECT_FILE_URL@" value="${project.file.url}" />
			<replacefilter token="@PROJECT_IDENTIFIER@" value="${project.identifier}" />
			<replacefilter token="@PROJECT_LICENSE@" value="${project.license}" />
			<replacefilter token="@PROJECT_LICENSE_URL@" value="${project.license.url}" />
			<replacefilter token="@PROJECT_NAME@" value="${project.name}" />
			<replacefilter token="@PROJECT_NAME_SHORT@" value="${project.name.short}" />
			<replacefilter token="@PROJECT_TARGET_INCLUDE@" value="${project.target.include}" />
			<replacefilter token="@PROJECT_TARGET_MATCH@" value="${project.target.match}" />
			<replacefilter token="@PROJECT_TARGET_PRIVOXY@" value="${project.target.privoxy}" />
			<replacefilter token="@PROJECT_TARGET_REGEX@" value="${project.target.regex}" />
			<replacefilter token="@PROJECT_URL@" value="${project.url}" />
			<replacefilter token="@PROJECT_VERSION@" value="${project.version}" />
			<replacefilter token="@PROJECT_VERSION_CHANNEL@" value="${project.version.channel}" />
		</replace>

		<!-- user.js (cont.) -->
		<java classpath="lib/base64" classname="Base64">
			<arg line="-e ${dir.build}/${project.name.short}.js ${file.temp}" />
		</java>

		<loadfile property="ENCODED_CONTENT" srcfile="${file.temp}" />

		<replace file="${dir.build}/user/bolanderi.user.js">
			<replacefilter token="@ENCODED_CONTENT@" value="${ENCODED_CONTENT}" />
		</replace>

		<!-- rename files -->
		<move todir="${dir.build}">
			<filtermapper>
				<replacestring from="bolanderi" to="${project.name.short}" />
			</filtermapper>
			<fileset dir="${dir.build}" includes="**/bolanderi.*" />
		</move>
	</target>

	<target name="_dist">
		<property name="dir.dist.sub" value="${dir.dist}/${project.version.channel}" />

		<delete dir="${dir.dist.sub}" />
		<mkdir dir="${dir.dist.sub}" />

		<!-- scripts -->
		<copy todir="${dir.dist.sub}">
			<fileset dir="${dir.build}" includes="${project.name.short}.js" />
			<fileset dir="${dir.build}/user" includes="${project.name.short}.user.js" />
		</copy>

		<!-- crx - http://github.com/Constellation/crxmake -->
		<exec executable="crxmake" failifexecutionfails="false">
			<arg value="--pack-extension=${dir.build}/crx --pack-extension-key=${crx.key} --extension-out=${dir.dist.sub}/${project.name.short}.crx" />
		</exec>
		<exec executable="cmd" osfamily="windows">
			<arg value="/C crxmake --pack-extension=${dir.build}/crx --pack-extension-key=${crx.key} --extension-out=${dir.dist.sub}/${project.name.short}.crx" />
		</exec>

		<!-- oex -->
		<zip destfile="${dir.dist.sub}/${project.name.short}.oex" basedir="${dir.build}/oex" />

		<!-- xpi -->
		<mkdir dir="${dir.build}/xpi_package/chrome" />

		<zip destfile="${dir.build}/xpi_package/chrome/${project.name.short}.jar" basedir="${dir.build}/xpi" includes="content/,locale/,skin/" />
		<copy todir="${dir.build}/xpi_package">
			<fileset dir="${dir.build}/xpi" includes="**" excludes="content/,locale/,skin/" />
		</copy>
		<replaceregexp file="${dir.build}/xpi_package/chrome.manifest" match=" (?=(?:content|locale|skin)/)" replace=" jar:chrome/${project.name.short}.jar!/" flags="g" />

		<zip destfile="${dir.dist.sub}/${project.name.short}.xpi" basedir="${dir.build}/xpi_package" />

		<!-- m2f -->
		<zip destfile="${dir.dist.sub}/${project.name.short}.m2f" basedir="${dir.build}/m2f" />

		<!-- privoxy -->
		<zip destfile="${dir.dist.sub}/${project.name.short}.privoxy.zip" basedir="${dir.build}/privoxy" />

		<!-- version.js -->
		<copy file="src/version.js" todir="${dir.dist}">
			<filterset>
				<filter token="PROJECT_VERSION" value="${project.version}" />
				<filter token="PROJECT_VERSION_STABLE" value="${project.version.stable}" />
			</filterset>
		</copy>

		<!-- doc -->
		<copy todir="${dir.dist}">
			<fileset dir="${dir.build}/doc" />
		</copy>
	</target>

	<target name="_stable">
		<property name="project.version.channel" value="stable" />
		<property name="project.file.url" value="${file.url.dist}/stable/${project.name.short}.js" />
		<property name="project.version.stable" value="${project.version}" />
		<property name="project.debug" value="false" />
	</target>

	<target name="_beta">
		<property name="project.version.channel" value="beta" />
		<property name="project.file.url" value="${file.url.dist}/beta/${project.name.short}.js" />
		<property name="project.version.stable" value="${project.version.stable}" />
		<property name="project.debug" value="false" />
	</target>
</project>

<project name="Helianthus.bolanderi" default="beta">
	<property file="build.properties" />

	<propertyfile file="version.properties">
		<entry key="version.main" default="0.0" />
		<entry key="version.release" default="0" />
		<entry key="version.build" default="0" type="int" pattern="####" operation="+" />
		<entry key="version.stable" default="0.0.0.0" />
	</propertyfile>
	<property file="version.properties" />

	<property name="PROJECT_VERSION" value="${version.main}.${version.release}.${version.build}" />

	<tstamp>
		<format property="PROJECT_BUILD_YEAR" pattern="yyyy" />
		<format property="PROJECT_BUILD_TIME" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>

	<patternset id="pattern.text">
		<include name="**/*.action" />
		<include name="**/*.css" />
		<include name="**/*.filter" />
		<include name="**/*.html" />
		<include name="**/*.js" />
		<include name="**/*.json" />
		<include name="**/*.manifest" />
		<include name="**/*.rdf" />
		<include name="**/*.xml" />
		<include name="**/*.xul" />
	</patternset>

	<!--** test **-->
	<target name="test" depends="_build,_build_cont" />

	<!--** build **-->
	<target name="build" depends="_build,_minify,_build_cont" />

	<!--** beta **-->
	<target name="beta" depends="_beta, build, _dist" />

	<!--** stable **-->
	<target name="stable" depends="_stable, build, _dist">
		<!-- duplicate as beta -->
		<copy todir="${dir.dist}/beta">
		 <fileset dir="${dir.dist}/stable" includes="/" />
		</copy>

		<!-- version.properties -->
		<propertyfile file="version.properties">
			<entry key="version.release" type="int" operation="+" value="1" />
			<entry key="version.stable" value="${PROJECT_VERSION}" />
		</propertyfile>
	</target>

	<!--** internals **-->

	<tempfile property="file.content" destdir="${dir.build}" suffix=".js" deleteonexit="true" />
	<tempfile property="file.temp" destdir="${dir.build}" suffix=".js" deleteonexit="true" />

	<target name="_build">
		<!-- fix eol -->
		<fixcrlf srcdir="src" eol="unix" encoding="utf-8">
			<patternset refid="pattern.text" />
		</fixcrlf>

		<property name="PROJECT_FILE_URL" value="${url.test}/${PROJECT_NAME_SHORT}.js" />

		<delete dir="${dir.build}" />
		<mkdir dir="${dir.build}" />

		<!-- CONTENT -->
		<concat destfile="${file.content}">
			<filterchain>
				<stripjavacomments />
				<striplinebreaks />
				<tokenfilter>
					<replacestring from="&apos;" to="&quot;" />
				</tokenfilter>
			</filterchain>

			<header filtering="false" trim="true" trimleading="true">
			(function(style, css)
			{
				style.appendChild(document.createTextNode(css));
				document.getElementsByTagName('head')[0].appendChild(style);
			})(document.createElement('style'), '</header><footer filtering="false" trimleading="true">');

			</footer>

			<fileset dir="src/script/kernel" includes="**/*.css" />
		</concat>

		<concat destfile="${file.content}" append="true" encoding="utf-8">
			<filterchain>
				<escapeunicode />
				<tokenfilter>
					<filetokenizer />
					<replaceregex pattern=" *\\\n\t+" replace="\\\\n" flags="g" />
				</tokenfilter>
			</filterchain>

			<filelist dir="src/script">
				<file name="opera/opera9.js" />
				<file name="opera/rubbish.js" />
				<file name="kernel/lib/jquery.js" />
			</filelist>
			<fileset dir="src/script">
				<include name="kernel/**/*.js" />
				<include name="modules/**/*.js" />
				<exclude name="kernel/lib/jquery.js" />
			</fileset>
		</concat>

		<loadfile property="CONTENT" srcfile="${file.content}" />

		<!-- js -->
		<copy file="src/script/bolanderi.js" tofile="${dir.build}/${PROJECT_NAME_SHORT}.js">
			<filterchain>
				<concatfilter prepend="src/header.js" />
			</filterchain>
			<filterset begintoken="/*@" endtoken="@*/">
				<filter token="CONTENT" value="${CONTENT}" />
			</filterset>
		</copy>
	</target>

	<taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask" classpath="${dir.tools}/closurecompiler/compiler.jar" />
	<target name="_minify">
		<!-- js(raw) -->
		<move file="${dir.build}/${PROJECT_NAME_SHORT}.js" tofile="${dir.build}/${PROJECT_NAME_SHORT}-raw.js" />

		<!-- js(minified) -->
		<jscomp compilationLevel="simple" warning="quiet" debug="false" output="${file.temp}">
			<sources dir="${dir.build}">
				<file name="${PROJECT_NAME_SHORT}-raw.js" />
			</sources>
		</jscomp>

		<copy file="${file.temp}" tofile="${dir.build}/${PROJECT_NAME_SHORT}.js">
			<filterchain>
				<concatfilter prepend="src/header.js" />
			</filterchain>
		</copy>
	</target>

	<target name="_build_cont">
		<!-- user.js -->
		<java classpath="tools/base64" classname="Base64">
			<arg line="-e ${dir.build}/${PROJECT_NAME_SHORT}.js ${file.temp}" />
		</java>

		<loadfile property="ENCODED_CONTENT" srcfile="${file.temp}" />

		<copy file="src/user/bolanderi.user.js" todir="${dir.build}/user">
			<filterchain>
				<concatfilter prepend="src/header.js" />
			</filterchain>
			<filterset>
				<filter token="ENCODED_CONTENT" value="${ENCODED_CONTENT}" />
			</filterset>
		</copy>

		<!-- xpi -->
		<copy todir="${dir.build}/xpi">
			<fileset dir="src/xpi" />
		</copy>
		<copy file="${dir.build}/${PROJECT_NAME_SHORT}.js" todir="${dir.build}/xpi/content/" />

		<!-- m2f -->
		<copy file="src/m2f/bolanderi.xml" todir="${dir.build}/m2f" />
		<copy file="${dir.build}/${PROJECT_NAME_SHORT}.js" todir="${dir.build}/m2f/${PROJECT_NAME_SHORT}/scripts" />

		<!-- crx -->
		<copy todir="${dir.build}/crx">
			<fileset dir="src/crx" />
			<fileset file="${dir.build}/${PROJECT_NAME_SHORT}.js" />
		</copy>

		<!-- privoxy -->
		<copy todir="${dir.build}/privoxy">
			<fileset dir="src/privoxy" />
		</copy>

		<!-- rename files -->
		<move todir="${dir.build}">
			<filtermapper>
				<replacestring from="bolanderi" to="${PROJECT_NAME_SHORT}" />
			</filtermapper>
			<fileset dir="${dir.build}" includes="**/bolanderi.*" />
		</move>

		<!-- replace tokens -->
		<replace dir="${dir.build}">
			<patternset refid="pattern.text" />

			<replacefilter token="@PROJECT_AUTHOR@" value="${PROJECT_AUTHOR}" />
			<replacefilter token="@PROJECT_BUILD_TIME@" value="${PROJECT_BUILD_TIME}" />
			<replacefilter token="@PROJECT_BUILD_YEAR@" value="${PROJECT_BUILD_YEAR}" />
			<replacefilter token="@PROJECT_DESCRIPTION@" value="${PROJECT_DESCRIPTION}" />
			<replacefilter token="@PROJECT_FILE_URL@" value="${PROJECT_FILE_URL}" />
			<replacefilter token="@PROJECT_LICENSE@" value="${PROJECT_LICENSE}" />
			<replacefilter token="@PROJECT_LICENSE_URL@" value="${PROJECT_LICENSE_URL}" />
			<replacefilter token="@PROJECT_NAME@" value="${PROJECT_NAME}" />
			<replacefilter token="@PROJECT_NAME_SHORT@" value="${PROJECT_NAME_SHORT}" />
			<replacefilter token="@PROJECT_TARGET_INCLUDE@" value="${PROJECT_TARGET_INCLUDE}" />
			<replacefilter token="@PROJECT_TARGET_MATCH@" value="${PROJECT_TARGET_MATCH}" />
			<replacefilter token="@PROJECT_TARGET_PRIVOXY@" value="${PROJECT_TARGET_PRIVOXY}" />
			<replacefilter token="@PROJECT_TARGET_REGEX@" value="${PROJECT_TARGET_REGEX}" />
			<replacefilter token="@PROJECT_URL@" value="${PROJECT_URL}" />
			<replacefilter token="@PROJECT_VERSION@" value="${PROJECT_VERSION}" />
		</replace>
	</target>

	<target name="_dist">
		<delete dir="${dir.dist-sub}" />
		<mkdir dir="${dir.dist-sub}" />

		<!-- scripts -->
		<copy todir="${dir.dist-sub}">
			<fileset dir="${dir.build}" includes="${PROJECT_NAME_SHORT}.js" />
			<fileset dir="${dir.build}/user" includes="${PROJECT_NAME_SHORT}.user.js" />
		</copy>

		<!-- crx - http://github.com/Constellation/crxmake -->
		<exec executable="crxmake" failifexecutionfails="false">
			<arg value="--pack-extension=${dir.build}/crx --pack-extension-key=${crx.key} --extension-out=${dir.dist-sub}/${PROJECT_NAME_SHORT}.crx" />
		</exec>
		<exec executable="cmd" osfamily="windows">
			<arg value="/C crxmake --pack-extension=${dir.build}/crx --pack-extension-key=${crx.key} --extension-out=${dir.dist-sub}/${PROJECT_NAME_SHORT}.crx" />
		</exec>

		<!-- xpi -->
		<mkdir dir="${dir.build}/xpi_package/chrome" />

		<zip destfile="${dir.build}/xpi_package/chrome/${PROJECT_NAME_SHORT}.jar" basedir="${dir.build}/xpi" includes="content/,locale/,skin/" />
		<copy todir="${dir.build}/xpi_package">
			<fileset dir="${dir.build}/xpi" includes="**" excludes="content/,locale/,skin/" />
		</copy>
		<replaceregexp file="${dir.build}/xpi_package/chrome.manifest" match=" (?=(?:content|locale|skin)/)" replace=" jar:chrome/${PROJECT_NAME_SHORT}.jar!/" flags="g" />

		<zip destfile="${dir.dist-sub}/${PROJECT_NAME_SHORT}.xpi" basedir="${dir.build}/xpi_package" />

		<!-- m2f -->
		<zip destfile="${dir.dist-sub}/${PROJECT_NAME_SHORT}.m2f" basedir="${dir.build}/m2f" />

		<!-- privoxy -->
		<zip destfile="${dir.dist-sub}/${PROJECT_NAME_SHORT}.privoxy.zip" basedir="${dir.build}/privoxy" />

		<!-- version.js -->
		<copy file="src/version.js" todir="${dir.dist}">
			<filterset>
				<filter token="PROJECT_VERSION" value="${PROJECT_VERSION}" />
				<filter token="PROJECT_VERSION_STABLE" value="${PROJECT_VERSION_STABLE}" />
			</filterset>
		</copy>
	</target>

	<target name="_stable">
		<property name="dir.dist-sub" value="${dir.dist}/stable" />
		<property name="PROJECT_FILE_URL" value="${url.dist}/stable/${PROJECT_NAME_SHORT}.js" />
		<property name="PROJECT_VERSION_STABLE" value="${PROJECT_VERSION}" />
	</target>

	<target name="_beta">
		<property name="dir.dist-sub" value="${dir.dist}/beta" />
		<property name="PROJECT_FILE_URL" value="${url.dist}/beta/${PROJECT_NAME_SHORT}.js" />
		<property name="PROJECT_VERSION_STABLE" value="${version.stable}" />
	</target>
</project>
